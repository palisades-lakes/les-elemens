@Book{ sproat-2000,
title = { A computational theory of writing systems },
author = { {Richard William} Sproat },
publisher = { Cambridge University Press },
year = { 2000 }}

@book{Mazur-2014,
author = {Joseph Mazur},
title = {Enlightening Symbols: A Short History of Mathematical Notation and Its Hidden Powers},
publisher = {Princeton University Press},
year = {2014},
note = {
One of the worst books I've ever read. 
'Stream of consciousness' would imply more structure and conherence.
Like a shuffled stack of notes on scrap paper, typed by a 3rd person. } }

@inproceedings{sussman-2005-programming-medium-ideas,
author = {Sussman, Gerald Jay},
title = {Why Programming is a Good Medium 
for Expressing Poorly Understood and Sloppily Formulated Ideas},
year = {2005},
publisher = {{ACM}},
booktitle = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
abstract = {I have stolen my title from the title of a paper 
given by Marvin Minsky in the 1960s, 
because it most effectively expresses 
what I will try to convey in this talk.
We have been programming universal computers for about 50 years. 
Programming provides us with new tools to express ourselves. 
We now have intellectual tools to describe "how to" as well as 
"what is." 
This is a profound transformation: 
it is a revolution in the way we think and in the way we express 
what we think.
For example, one often hears a student or teacher complain 
that the student knows the "theory" of some subject 
but cannot effectively solve problems. 
We should not be surprised: 
the student has no formal way to learn technique. 
We expect the student to learn to solve problems 
by an inefficient process: 
the student watches the teacher solve a few problems, 
hoping to abstract the general procedures 
from the teacher's behavior on particular examples. 
The student is never given any instructions 
on how to abstract from examples, 
nor is the student given any language 
for expressing what has been learned. 
It is hard to learn what one cannot express. 
But now we can express it!
Expressing methodology in a computer language forces 
it to be unambiguous and computationally effective. 
The task of formulating a method as a computer-executable program 
and debugging that program is 
a powerful exercise in the learning process. 
The programmer expresses his/her poorly understood
or sloppily formulated idea in a precise way, 
so that it becomes clear 
what is poorly understood or sloppily formulated. 
Also, once formalized procedurally, 
a mathematical idea becomes a tool that can be used directly 
to compute results.I will defend this viewpoint 
with examples and demonstrations 
from electrical engineering and from classical mechanics.}
}
  
